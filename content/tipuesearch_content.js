var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站:\xa0 https://mdecd2025.github.io/hw-41223224/content/index.html \n 學員作業倉儲:\xa0 https://github.com/mdecd2025/hw-41223224 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n \n', 'tags': '', 'url': 'About.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41223224 \n \n \n \n \n /downloads/41223224fourbar.7z', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n /downloads/41223224-hw2.zip \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n \n 操作心得:HW2需要將stl轉成obj然後從webots中cadeshape url加入，因為HW1重做了很多次所以比較懂怎麼做但我還是需要看別人的影片操作。首先新增robot下面四層分別是base1 solid, base 2 solid, joint1 hingejoint, joint4 hingejoint,然後插入obj檔，joint 2 3都在1的下面，在joint1下加入馬達motor。 \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 所有檔案: /downloads/.41223224baseket.zip \n /downloads/hw3-41223224-baseket.7z \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41223224 \n \n \n \n 因為按錯停止所以重錄一個簡易版下面會補上步驟。 \n 操作心得:遇到的問題是只要加入floor籃球機的力道就小彈不出去，所以地板改成shape box，就可以正常投籃，因為按做停止所以過程沒錄到，有重錄一個簡易版，後續會再加入籃球框及投籃影片。 \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'task', 'text': '', 'tags': '', 'url': 'task.html'}, {'title': 'task1', 'text': 'list \n \n g6學員連結執行成果 \n 全學員連結 \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '近端操作 \n \n 心得: \n 做到後面卡在認證的地方因為現在不能用密碼所以用tokens但還是卡住 \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'task3', 'text': '所有壓縮檔 /downloads/fourbar.zip \n fourbar base \n \n fourbar link1 \n \n fourbar link2 \n \n fourbar link3 \n \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': 'webots新增一根link \n \n 步驟: \n 在transform上add solid1，add children shape，shape上add geometry Box調尺寸 \n 架構樹 \n transform \n -floor \n -solid1 \n -hingejoint \n \xa0 \xa0 \xa0 \xa0 -hingejointparameters \n \xa0 \xa0 \xa0 \xa0 -solid2 \n 加入hingejoint \n \n 步驟: \n transform children hingejoint，hingejoint下add hingejointparameters，hingejoint下add endpoint solid，add geomwtry Box 調size，add physics mass質量0.2 \n \n 步驟: \n 在link1下add hingejoint solid shape Box 這就是link2，link3是在 base下', 'tags': '', 'url': 'task4.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度:w1.2新增各組學員網站倉儲連結，w3近端操作影片，w4.5 fourbar繪製和影片上傳，w6789壓縮檔上傳，研究webots，w10其中進度。 \n 各週網頁內容: \n 期中心得:前面幾周沒什麼問題w6到9都在研究webot一直看別人上傳的影片和問gpt但沒成果所以沒拍影片 \n 期中自評影片: \n \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n /downloads/exam1-41223224.7z \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號 \n \n 操作步驟及心得: \n 三種作業或考試做下來還是覺得四連桿比較難常常看到花掉。 \n 先加入robot下面solid(base)兩個Hingejoint(joint1和joint4)，base下面shape box 1m，joint1下面endpoint solid(link1)下面pose shape box 0.4m，從solvespace量到的點到原點距離更改translation rotation。link1下面bounding加入pose box 0.4m 修改translation 打開physics。link1下面加入Hingejoint(joint2) endpoint solid(link2) 加入兩個pose 下面shape box x長0.6m另一個pose 長y0.3 打開physics。link2下面加入Hingejoint(joint3) endpointsolid(link3) pose shape box 0.9m 打開physics，修改所有jointparameters Hingejoint parameters 中axis0 0 1 和anchor。', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n /downloads/exam2.7z \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 -\xa041223224 \n part1 \n \n part2 \n \n 操作步驟及心得: \n 這題和HW2一樣所以做起來沒什麼問題。 \n 用splvespace畫出base 200, link1 124, link2 150, link3 180,角度24度，將stl轉成obj spiltpart，新增robot下面 base1,base2,joint1,joint4 四個下面cadshape將對應obj叫進來，joint1下面joint2,joint2下面joint3，也是將cadshape obj叫進來，joint1下parameters motor 程式叫進來就可以動了。', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 41223224 \n \n http://localhost:1234/index.html \n 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 41223224 \n \n ws://[2001:288:6004:17:fff1:cd25:0000:b036]:1234 \n 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3 - 41223224 \n \n 操作步驟: \n 1.打開cmd \n 2.輸入 webotsw --stream\xa0 +路徑 \n 3.打開後看怎麼操作 \n 4.去 http://localhost:1234/index.html \n 5.conect本地的webots \n 6.換成自己的IPV6網址 \n 7.看是否可以連動 \n 8.完成 \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明: \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n /downloads/WEBOTS 動態投籃模 擬系統的協同設計41223224.pdf \n 國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41223224 -  建立youbot加入平台和投籃機 \n \n 國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41223224 - 各 加入籃球框 \n \n \n 6/19補上supervisor robot feedball按R產生球F可擊出狀態 \n 心得:這堂課做到後面覺得越來越難很難跟上其他人的速度，從一開始的四連桿我就覺得很難做了56遍還是動不起來好在後面HW23Exam23都滿順利的，但我還是有把HW123Exam123和final都做出來，雖然final沒做到完整，只能讓它移動，所以我還是要繼續修改盡量讓它完整，當老師問我在這堂課學到甚麼我實在答不出來，我在這堂課雖然都只學到皮毛，但之後我會在忙著跟上進度時先搞清楚自己在做甚麼。 \n', 'tags': '', 'url': 'Final.html'}, {'title': '程式', 'text': 'fourbar_controller \n from controller import Robot, Keyboard  # 匯入 Webots 控制所需的 Robot 和 Keyboard 類別\n\n# 常數設定\nTIME_STEP = 32  # 控制循環的時間間隔（毫秒）\nMAX_VELOCITY = 10.0  # 車輪最大速度\nANGLE_STEP = 40 * 3.14159 / 180  # 將 40 度轉換為弧度（機構用角度）\nPOSITION_M = ANGLE_STEP          # 機構移動至 +40 度的位置\nPOSITION_K = 0.0                 # 機構移動至 0 度的位置\n\n# 初始化機器人與鍵盤\nrobot = Robot()  # 創建 Robot 物件\ntimestep = int(robot.getBasicTimeStep())  # 取得機器人基礎時間步長\nkeyboard = Keyboard()  # 創建鍵盤物件\nkeyboard.enable(timestep)  # 啟用鍵盤偵測，使用相同時間步長\n\n# 嘗試取得馬達與感測器裝置\ntry:\n    motor = robot.getDevice(\'motor1\')  # 取得名為 motor1 的馬達裝置\n    sensor = robot.getDevice(\'motor1_sensor\')  # 取得與馬達對應的感測器\n    sensor.enable(timestep)  # 啟用感測器以讀取資料\n    mechanism_enabled = True  # 成功取得裝置，啟用機構控制\nexcept Exception:\n    mechanism_enabled = False  # 若出錯（裝置不存在），則停用機構功能\n\n# 嘗試取得車輪裝置\ntry:\n    wheels = [robot.getDevice(f"wheel{i+1}") for i in range(4)]  # 取得四個車輪裝置\n    for wheel in wheels:\n        wheel.setPosition(float(\'inf\'))  # 設為無限位置，開啟速度控制模式\n        wheel.setVelocity(0)  # 初始速度設為 0\n    platform_enabled = True  # 若成功取得裝置，啟用平台控制\nexcept Exception:\n    platform_enabled = False  # 若取得失敗，停用平台功能\n\n# 狀態機初始狀態：允許按 F 鍵動作\ncurrent_state = "allow_f"\n\n# 記錄按鍵是否已被按下，用於去彈跳（避免重複觸發）\nkey_pressed = {\n    \'v\': False,  # 記錄 V 鍵是否被按下\n    \'f\': False   # 記錄 F 鍵是否被按下\n}\n\n# 主循環，重複執行直到模擬結束\nwhile robot.step(timestep) != -1:\n    key = keyboard.getKey()  # 讀取目前按下的鍵\n\n    # 平台控制（移動用輪子）\n    if platform_enabled:\n        if key == Keyboard.UP:\n            for wheel in wheels:\n                wheel.setVelocity(MAX_VELOCITY)  # 所有輪子向前\n        elif key == Keyboard.DOWN:\n            for wheel in wheels:\n                wheel.setVelocity(-MAX_VELOCITY)  # 所有輪子向後\n        elif key == Keyboard.LEFT:\n            # 左轉（左右輪反方向旋轉）\n            wheels[0].setVelocity(MAX_VELOCITY)\n            wheels[1].setVelocity(-MAX_VELOCITY)\n            wheels[2].setVelocity(MAX_VELOCITY)\n            wheels[3].setVelocity(-MAX_VELOCITY)\n        elif key == Keyboard.RIGHT:\n            # 右轉（左右輪反方向旋轉）\n            wheels[0].setVelocity(-MAX_VELOCITY)\n            wheels[1].setVelocity(MAX_VELOCITY)\n            wheels[2].setVelocity(-MAX_VELOCITY)\n            wheels[3].setVelocity(MAX_VELOCITY)\n        elif key == ord(\'Q\') or key == ord(\'q\'):\n            print("Exiting...")  # 按 Q 結束程式\n            break\n        else:\n            for wheel in wheels:\n                wheel.setVelocity(0)  # 沒有方向鍵按下時停止移動\n\n    # 馬達控制（用 F / V 鍵操作）\n    if mechanism_enabled:\n        _current_motor_position = sensor.getValue()  # 讀取馬達目前位置（可用於除錯）\n\n        # 按下 F 鍵時，若允許且尚未按住，讓馬達轉到 +40 度\n        if key == ord(\'F\') or key == ord(\'f\'):\n            if not key_pressed[\'f\'] and current_state == "allow_f":\n                motor.setPosition(POSITION_M)  # 馬達移動至 +40 度\n                current_state = "allow_v"  # 下一次只能按 V\n            key_pressed[\'f\'] = True  # 標記 F 鍵已按\n        else:\n            key_pressed[\'f\'] = False  # F 鍵已放開\n\n        # 按下 V 鍵時，若允許且尚未按住，讓馬達轉回 0 度\n        if key == ord(\'V\') or key == ord(\'v\'):\n            if not key_pressed[\'v\'] and current_state == "allow_v":\n                motor.setPosition(POSITION_K)  # 馬達移動至 0 度\n                current_state = "allow_f"  # 下一次只能按 F\n            key_pressed[\'v\'] = True  # 標記 V 鍵已按\n        else:\n            key_pressed[\'v\'] = False  # V 鍵已放開 \n feed_ball \n from controller import Supervisor, Keyboard  # 匯入 Webots 的 Supervisor 和鍵盤控制模組\nimport time                                   # 匯入時間模組，用於記錄與計時\nimport random                                 # 匯入隨機模組，用於顏色和命名\nimport numpy as np                            # 匯入 NumPy，用來處理向量運算\nimport re                                     # 匯入正規表達式模組，用來比對 DEF 名稱\n\n# ----------------- 參數區 -----------------\nHOOP_CENTER = [0.622, -0.103, 0.742838]       # 籃框中心座標\nBALL_DEF_PATTERN = re.compile(r"Sphere_\\d+")  # 比對球的 DEF 名稱用的正則表達式\n\nsupervisor = Supervisor()                     # 建立 Webots 的 Supervisor 實例\ntimestep = int(supervisor.getBasicTimeStep()) # 取得模擬時間步長\nkeyboard = Keyboard()                         # 建立鍵盤控制實例\nkeyboard.enable(timestep)                     # 啟用鍵盤，並設定更新頻率為 timestep\n\n# 球與軌跡點設定\nsphere_radius = 0.1\nTRAJECTORY_POINT_RADIUS = 0.03                # 軌跡球的半徑\nTRAJECTORY_POINT_STEP = 0.12                  # 軌跡點之間的最小距離\nTRAJECTORY_MAX_POINTS = 5                     # 最多顯示5個軌跡點\n\n# 狀態變數初始化\nwaiting_ball_def = None                       # 等待發射的球的 DEF 名稱\nwaiting_ball_info = None                      # 等待發射球的資訊（位置與顏色）\nlast_key_time = 0                             # 上一次按鍵時間（防止重複觸發）\ndebounce_time = 0.5                           # 按鍵去彈時間（秒）\ndefault_feed_pos = (-0.35, 0.0, 0.9)           # 新球產生時的相對位置\nPRINT_INTERVAL = 0.2                          # 球座標輸出間隔\n\ncurrent_tracked_def = None                    # 目前追蹤的球 DEF 名稱\nlast_print_time = time.time()                 # 上次輸出時間\n\ntrajectory_points = []                        # 保存目前的軌跡點 [(位置, def名稱)] 最多5個\n\n# ----------------- 函式定義 -----------------\n\n# 將軸角轉換為旋轉矩陣（用於從 local 座標轉為 world 座標）\ndef axis_angle_to_rotation_matrix(axis, angle):\n    x, y, z = axis\n    c = np.cos(angle)\n    s = np.sin(angle)\n    C = 1 - c\n    return np.array([\n        [x*x*C + c,   x*y*C - z*s, x*z*C + y*s],\n        [y*x*C + z*s, y*y*C + c,   y*z*C - x*s],\n        [z*x*C - y*s, z*y*C + x*s, z*z*C + c]\n    ])\n\n# 產生獨一無二的球名稱（根據時間戳與亂數）\ndef generate_valid_def_name(base_name="Sphere"):\n    timestamp = int(supervisor.getTime() * 1000)\n    return f"{base_name}_{timestamp}_{random.randint(0, 10000)}"\n\n# 產生隨機 RGB 顏色\ndef generate_random_color():\n    return random.random(), random.random(), random.random()\n\n# 將 youbot 上的 local 座標轉成 world 座標\ndef youbot_local_to_world(local_pos):\n    youbot_node = supervisor.getFromDef(\'youbot\')\n    if youbot_node is None:\n        raise RuntimeError("找不到 DEF 為 youbot 的 Robot 物件")\n    youbot_translation = np.array(youbot_node.getField(\'translation\').getSFVec3f())\n    youbot_rotation = youbot_node.getField(\'rotation\').getSFRotation()\n    youbot_axis = youbot_rotation[:3]\n    youbot_angle = youbot_rotation[3]\n    youbot_rot_mat = axis_angle_to_rotation_matrix(youbot_axis, youbot_angle)\n    rotated = youbot_rot_mat @ np.array(local_pos)\n    world_pos = youbot_translation + rotated\n    return tuple(world_pos)\n\n# 建立靜止球（不含物理）\ndef create_static_ball(def_name, world_pos, r, g, b):\n    sphere_string = f"""\n    DEF {def_name} Solid {{\n      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}\n      contactMaterial "ball"\n      children [\n        Shape {{\n          geometry Sphere {{\n            radius {sphere_radius}\n          }}\n          appearance Appearance {{\n            material Material {{\n              diffuseColor {r} {g} {b}\n            }}\n          }}\n        }}\n      ]\n      boundingObject Sphere {{\n        radius {sphere_radius}\n      }}\n    }}\n    """\n    root = supervisor.getRoot()\n    children_field = root.getField("children")\n    children_field.importMFNodeFromString(-1, sphere_string)\n\n# 建立動態球（可以被物理模擬推動）\ndef create_dynamic_ball(def_name, world_pos, r, g, b):\n    sphere_string = f"""\n    DEF {def_name} Solid {{\n      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}\n      contactMaterial "ball"\n      children [\n        Shape {{\n          geometry Sphere {{\n            radius {sphere_radius}\n          }}\n          appearance Appearance {{\n            material Material {{\n              diffuseColor {r} {g} {b}\n            }}\n          }}\n        }}\n      ]\n      boundingObject Sphere {{\n        radius {sphere_radius}\n      }}\n      physics Physics {{\n        mass 0.01\n        density -1\n      }}\n    }}\n    """\n    root = supervisor.getRoot()\n    children_field = root.getField("children")\n    children_field.importMFNodeFromString(-1, sphere_string)\n\n# 建立軌跡小球作為可視化記號（Transform + Shape，無物理）\ndef create_trajectory_point(pos):\n    def_name = generate_valid_def_name("TrajectoryPt")\n    sphere_string = f"""\n    DEF {def_name} Transform {{\n      translation {pos[0]} {pos[1]} {pos[2]}\n      children [\n        Shape {{\n          geometry Sphere {{\n            radius {TRAJECTORY_POINT_RADIUS}\n          }}\n          appearance Appearance {{\n            material Material {{\n              diffuseColor 1 0.7 0\n              transparency 0.3\n            }}\n          }}\n        }}\n      ]\n    }}\n    """\n    root = supervisor.getRoot()\n    children_field = root.getField("children")\n    children_field.importMFNodeFromString(-1, sphere_string)\n    return def_name\n\n# 刪除目前所有軌跡點\ndef delete_trajectory_points():\n    global trajectory_points\n    for _, def_name in trajectory_points:\n        node = supervisor.getFromDef(def_name)\n        if node:\n            node.remove()\n    trajectory_points.clear()\n\n# 建立一顆靜止球（並儲存它的資訊）\ndef create_static_sphere(supervisor, x, y, z):\n    global waiting_ball_def, waiting_ball_info\n    def_name = generate_valid_def_name()\n    waiting_ball_def = def_name\n    r, g, b = generate_random_color()\n    world_pos = youbot_local_to_world((x, y, z))\n    waiting_ball_info = (world_pos, r, g, b)\n    create_static_ball(def_name, world_pos, r, g, b)\n\n# 將靜止球移除並改為物理球\ndef activate_dynamic_ball():\n    global waiting_ball_def, waiting_ball_info\n    if waiting_ball_def is None or waiting_ball_info is None:\n        return\n    ball_node = supervisor.getFromDef(waiting_ball_def)\n    if ball_node is not None:\n        ball_node.remove()\n        supervisor.step(int(supervisor.getBasicTimeStep()))\n    world_pos, r, g, b = waiting_ball_info\n    create_dynamic_ball(waiting_ball_def, world_pos, r, g, b)\n    waiting_ball_def = None\n    waiting_ball_info = None\n\n# 判斷球是否落地（以 z 軸高度為依據）\ndef is_ball_landed(pos, threshold_z=0.13):\n    return pos[2] < threshold_z\n\n# ----------------- 主迴圈 -----------------\n\nprint("按 R 產生一顆靜止球，按 F 讓球變 dynamic 可擊出（最多只有5個軌跡點跟著球跑，球落地後軌跡自動消失）")\n\nwhile supervisor.step(timestep) != -1:\n    key = keyboard.getKey()\n    current_time = time.time()\n\n    # 按 R 鍵產生一顆靜止球\n    if key == ord(\'R\') and (current_time - last_key_time >= debounce_time):\n        if waiting_ball_def is None:\n            create_static_sphere(supervisor, *default_feed_pos)\n            current_tracked_def = waiting_ball_def\n            delete_trajectory_points()\n        else:\n            print("還有一顆球等待擊出，請先擊出再產生新球。")\n        last_key_time = current_time\n\n    # 按 F 鍵讓球變成可被物理推動（Dynamic）\n    if key == ord(\'F\') and (current_time - last_key_time >= debounce_time):\n        activate_dynamic_ball()\n        last_key_time = current_time\n\n    # 若目前有追蹤的球，就更新軌跡顯示與落地檢查\n    if current_tracked_def is not None:\n        ball_node = supervisor.getFromDef(current_tracked_def)\n        if ball_node is not None:\n            pos = ball_node.getPosition()\n            if current_time - last_print_time >= PRINT_INTERVAL:\n                # print(f"球 {current_tracked_def} 絕對座標: [{pos[0]:.4f}, {pos[1]:.4f}, {pos[2]:.4f}]")\n                last_print_time = current_time\n\n            # 若與上一個軌跡點距離足夠遠，新增新的軌跡點\n            if (not trajectory_points) or np.linalg.norm(np.array(pos) - np.array(trajectory_points[-1][0])) > TRAJECTORY_POINT_STEP:\n                def_name = create_trajectory_point(pos)\n                trajectory_points.append((pos, def_name))\n                if len(trajectory_points) > TRAJECTORY_MAX_POINTS:\n                    _, old_def = trajectory_points.pop(0)\n                    node = supervisor.getFromDef(old_def)\n                    if node:\n                        node.remove()\n\n            # 若球落地，刪除軌跡\n            if is_ball_landed(pos):\n                delete_trajectory_points()\n        else:\n            delete_trajectory_points()\n            current_tracked_def = None \n stand_controller \n from controller import Robot, Keyboard  # 匯入 Webots 提供的 Robot 與 Keyboard 類別\n\n# 常數定義\nWHEEL_RADIUS = 0.1  # 輪子的半徑（單位：公尺），此處為 10 公分\nL = 0.471  # 機器人長度的一半（用於動力學計算）\nW = 0.376  # 機器人寬度的一半\nMAX_VELOCITY = 10.0  # 輪子的最大速度（單位：rad/s）\n\n# 初始化機器人實體\nrobot = Robot()\n\n# 取得模擬的時間步長（time step）\ntimestep = int(robot.getBasicTimeStep())\n\n# 取得發射器裝置，用於傳送分數（與其他模組或裝置通訊）\nemitter = robot.getDevice("score_emitter")\n\nscore_to_send = 2  # 每次感測成功後加分數，這裡設為 2 分，可自行調整\n\n# 初始化距離感測器（距離球進入感測區的偵測裝置）\nsensor = robot.getDevice(\'sensor\')  # 取得感測器裝置\nsensor.enable(timestep)  # 啟用感測器並設定刷新速率\n\nscore = 0  # 初始分數\nlast_score_time = 0  # 上一次得分的時間\ncooldown = 1.0  # 冷卻時間（秒），防止重複計分\n\n# 初始化鍵盤控制器\nkeyboard = Keyboard()\nkeyboard.enable(timestep)  # 啟用鍵盤偵測並設定刷新速率\n\n# 取得四個馬達裝置（四輪全驅）\nwheel5 = robot.getDevice("wheel5")  # 前右輪\nwheel6 = robot.getDevice("wheel6")  # 前左輪\nwheel7 = robot.getDevice("wheel7")  # 後右輪\nwheel8 = robot.getDevice("wheel8")  # 後左輪\n\n# 設定輪子為速度控制模式（inf 表示不限制旋轉角度）\nfor wheel in [wheel5, wheel6, wheel7, wheel8]:\n    wheel.setPosition(float(\'inf\'))  # 設定為速度控制（非位置控制）\n    wheel.setVelocity(0)  # 初始速度為 0（靜止）\n\n# 定義控制四個輪子速度的函式\ndef set_wheel_velocity(v1, v2, v3, v4):\n    """設定每個輪子的速度"""\n    wheel5.setVelocity(v1)\n    wheel6.setVelocity(v2)\n    wheel7.setVelocity(v3)\n    wheel8.setVelocity(v4)\n\n# 將感測器AD值對應到距離的查表函式（線性插值）\nlookup_table = [\n    (1000, 0.00),\n    (620, 0.12),\n    (372, 0.13),\n    (248, 0.14),\n    (186, 0.15),\n    (0, 0.18)\n]\n\n# 根據感測器的AD值推算實際距離（單位：公尺）\ndef ad_to_distance(ad_value):\n    # AD 值遞減時表示距離遞增（感測器邏輯）\n    for i in range(len(lookup_table)-1):\n        a0, d0 = lookup_table[i]\n        a1, d1 = lookup_table[i+1]\n        if a1 <= ad_value <= a0:\n            # 線性插值公式：在 a0 和 a1 之間計算距離值\n            return d0 + (d1 - d0) * (ad_value - a0) / (a1 - a0)\n    # 若超出表格範圍則回傳邊界值\n    if ad_value > lookup_table[0][0]:\n        return lookup_table[0][1]\n    return lookup_table[-1][1]\n\n# 主迴圈開始，負責持續讀取感測器與鍵盤輸入\nprint("Use \'W\', \'S\', \'A\', \'D\' keys to control the robot.")\nprint("W: Move forward, S: Move backward, A: Turn left, D: Turn right.")\nprint("Press \'Q\' to quit.")\n\nwhile robot.step(timestep) != -1:  # 每次時間步進（直到模擬結束）\n\n    key = keyboard.getKey()  # 讀取目前按下的鍵\n\n    # 讀取距離感測器數值\n    sensor_value = sensor.getValue()\n    distance = ad_to_distance(sensor_value)  # 轉換成距離（公尺）\n\n    current_time = robot.getTime()  # 取得當前模擬時間\n\n    # 如果按下 F 鍵，印出目前距離（除錯用）\n    if key == ord(\'F\') or key == ord(\'f\'):\n        print(distance)\n\n    # 如果按下 V 鍵，也印出距離（除錯用）\n    if key == ord(\'V\') or key == ord(\'v\'):\n        print(distance)\n\n    # 若感測距離小於 0.11 公尺，且超過冷卻時間，則加分\n    if distance < 0.11 and (current_time - last_score_time) > cooldown:\n        score += 2\n        print("得分")  # 顯示得分訊息\n        print(distance)  # 顯示當前距離\n        emitter.send(str(score_to_send).encode(\'utf-8\'))  # 傳送分數給外部（如顯示器）\n\n        last_score_time = current_time  # 更新上次得分時間\n\n    # 根據按鍵控制輪子移動方向\n    if key == ord(\'S\') or key == ord(\'w\'):\n        # 前進\n        velocity = MAX_VELOCITY\n        set_wheel_velocity(velocity, velocity, velocity, velocity)\n    elif key == ord(\'W\') or key == ord(\'s\'):\n        # 後退\n        velocity = -MAX_VELOCITY\n        set_wheel_velocity(velocity, velocity, velocity, velocity)\n    elif key == ord(\'D\') or key == ord(\'d\'):\n        # 右轉：左輪前進，右輪後退\n        velocity = MAX_VELOCITY\n        set_wheel_velocity(-velocity, velocity, -velocity, velocity)\n    elif key == ord(\'A\') or key == ord(\'a\'):\n        # 左轉：左輪後退，右輪前進\n        velocity = MAX_VELOCITY\n        set_wheel_velocity(velocity, -velocity, velocity, -velocity)\n    elif key == ord(\'Q\') or key == ord(\'q\'):\n        # 離開程式\n        print("Exiting...")\n        break\n    else:\n        # 沒有按鍵時停止移動\n        set_wheel_velocity(0, 0, 0, 0)\n \n', 'tags': '', 'url': '程式.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};