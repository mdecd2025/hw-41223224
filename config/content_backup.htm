<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41223224/content/index.html">https://mdecd2025.github.io/hw-41223224/content/index.html</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41223224">https://github.com/mdecd2025/hw-41223224</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<p></p>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 41223224</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/IASgcOjq0zg" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WT_NR_z2TLk" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ymXVNVzNaJ8" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/cKVCXZvJ2ak" width="560"></iframe></p>
<p><a href="/downloads/41223224fourbar.7z" title="webots四連趕">/downloads/41223224fourbar.7z</a></p><h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p><span style="background-color: #ffff00;"><a href="/downloads/41223224-hw2.zip">/downloads/41223224-hw2.zip</a></span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/exdaIAVxfgk" width="560"></iframe></p>
<p>操作心得:HW2需要將stl轉成obj然後從webots中cadeshape url加入，因為HW1重做了很多次所以比較懂怎麼做但我還是需要看別人的影片操作。首先新增robot下面四層分別是base1 solid, base 2 solid, joint1 hingejoint, joint4 hingejoint,然後插入obj檔，joint 2 3都在1的下面，在joint1下加入馬達motor。</p>
<p></p><h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p><span style="background-color: #ffff00;">所有檔案:<a href="/downloads/.41223224baseket.zip">/downloads/.41223224baseket.zip</a></span></p>
<p><span style="background-color: #ffff00;"><a href="/downloads/hw3-41223224-baseket.7z">/downloads/hw3-41223224-baseket.7z</a></span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 41223224</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/guq0yQ6aHvk" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GRPw4_qMUTw" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2Mq75yNYkXs" width="560"></iframe></p>
<p>因為按錯停止所以重錄一個簡易版下面會補上步驟。</p>
<p>操作心得:遇到的問題是只要加入floor籃球機的力道就小彈不出去，所以地板改成shape box，就可以正常投籃，因為按做停止所以過程沒錄到，有重錄一個簡易版，後續會再加入籃球框及投籃影片。</p>
<p></p><h1>task</h1>
<h2>task1</h2>
<p>list</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/mAPAMDb21Rs" width="560"></iframe></p>
<p><a href="https://mdecd2025.github.io/hw-41223224/content/Brython.html?src=https://gist.githubusercontent.com/41223224/c50c2c3abfe6ad21baa39c75c789bcb4/raw/3b0306d16d4e5cec6fe91a65b78c5bfb924b371b/g6*list">g6學員連結執行成果</a></p>
<p><a href="https://mdecd2025.github.io/hw-41223224/content/Brython.html?src=https://gist.githubusercontent.com/41223224/a1a597085c2e4ed40c2f3fdcf77ad3d7/raw/bb1236d733249221005ba913f8bd41374c911581/g6*list">全學員連結</a></p>
<h2>task2</h2>
<p>近端操作</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ZUrKGr4DL4Y" width="560"></iframe></p>
<p>心得:</p>
<p>做到後面卡在認證的地方因為現在不能用密碼所以用tokens但還是卡住</p>
<p><img alt="" height="121" src="/images/螢幕擷取畫面 2025-03-18 172131.png" width="400"/></p>
<h2>task3</h2>
<p>所有壓縮檔<a href="/downloads/fourbar.zip">/downloads/fourbar.zip</a></p>
<p>fourbar base</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6_bHVgtzf3o" width="560"></iframe></p>
<p>fourbar link1</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_jFyMn0-Vl0" width="560"></iframe></p>
<p>fourbar link2</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/aVmclPAfN3I" width="560"></iframe></p>
<p>fourbar link3</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/zFpyn1qQ8Qo" width="560"></iframe></p>
<h2>task4</h2>
<p>webots新增一根link</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/WT_NR_z2TLk" width="560"></iframe></p>
<p>步驟:</p>
<p>在transform上add solid1，add children shape，shape上add geometry Box調尺寸</p>
<p>架構樹</p>
<p>transform</p>
<p>-floor</p>
<p>-solid1</p>
<p>-hingejoint</p>
<p>        -hingejointparameters</p>
<p>        -solid2</p>
<p>加入hingejoint</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ymXVNVzNaJ8" width="560"></iframe></p>
<p>步驟:</p>
<p>transform children hingejoint，hingejoint下add hingejointparameters，hingejoint下add endpoint solid，add geomwtry Box 調size，add physics mass質量0.2</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/cKVCXZvJ2ak" width="560"></iframe></p>
<p>步驟:</p>
<p>在link1下add hingejoint solid shape Box 這就是link2，link3是在 base下</p><h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:w1.2新增各組學員網站倉儲連結，w3近端操作影片，w4.5 fourbar繪製和影片上傳，w6789壓縮檔上傳，研究webots，w10其中進度。</p>
<p>各週網頁內容:</p>
<p>期中心得:前面幾周沒什麼問題w6到9都在研究webot一直看別人上傳的影片和問gpt但沒成果所以沒拍影片</p>
<p>期中自評影片:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/PKJQ_DW8xhE" width="560"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p><a href="/downloads/exam1-41223224.7z">/downloads/exam1-41223224.7z</a></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6WZvEUc7AP0" width="560"></iframe></p>
<p>操作步驟及心得:</p>
<p>三種作業或考試做下來還是覺得四連桿比較難常常看到花掉。</p>
<p>先加入robot下面solid(base)兩個Hingejoint(joint1和joint4)，base下面shape box 1m，joint1下面endpoint solid(link1)下面pose shape box 0.4m，從solvespace量到的點到原點距離更改translation rotation。link1下面bounding加入pose box 0.4m 修改translation 打開physics。link1下面加入Hingejoint(joint2) endpoint solid(link2) 加入兩個pose 下面shape box x長0.6m另一個pose 長y0.3 打開physics。link2下面加入Hingejoint(joint3) endpointsolid(link3) pose shape box 0.9m 打開physics，修改所有jointparameters Hingejoint parameters 中axis0 0 1 和anchor。</p><h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p><a href="/downloads/exam2.7z">/downloads/exam2.7z</a></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 41223224</p>
<p>part1</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/r7nemR8fIpo" width="560"></iframe></p>
<p>part2</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/hxeRzbYWESw" width="560"></iframe></p>
<p>操作步驟及心得:</p>
<p>這題和HW2一樣所以做起來沒什麼問題。</p>
<p>用splvespace畫出base 200, link1 124, link2 150, link3 180,角度24度，將stl轉成obj spiltpart，新增robot下面 base1,base2,joint1,joint4 四個下面cadshape將對應obj叫進來，joint1下面joint2,joint2下面joint3，也是將cadshape obj叫進來，joint1下parameters motor 程式叫進來就可以動了。</p><h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 41223224</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5M_zgGkDVQw" width="560"></iframe></p>
<p><a href="http://localhost:1234/index.html">http://localhost:1234/index.html</a></p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-2 - 41223224</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vL7XX9Pir-4" width="560"></iframe></p>
<p>ws://[2001:288:6004:17:fff1:cd25:0000:b036]:1234</p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3-3 - 41223224</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/aW5mH7jxYMw" width="560"></iframe></p>
<p>操作步驟:</p>
<p>1.打開cmd</p>
<p>2.輸入<span>webotsw --stream  +路徑</span></p>
<p><span>3.打開後看怎麼操作</span></p>
<p><span>4.去<a href="http://localhost:1234/index.html">http://localhost:1234/index.html</a></span></p>
<p><span>5.conect本地的webots</span></p>
<p><span>6.換成自己的IPV6網址</span></p>
<p><span>7.看是否可以連動</span></p>
<p><span>8.完成</span></p>
<p></p><h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明:</span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p><span><a href="/downloads/WEBOTS 動態投籃模 擬系統的協同設計41223224.pdf">/downloads/WEBOTS 動態投籃模 擬系統的協同設計41223224.pdf</a></span></p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41223224 - </span>建立youbot加入平台和投籃機</p>
<p><span><span style="background-color: #ccffcc;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/17N2Zkz0OeY" width="560"></iframe></span></span></p>
<p><span>國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 41223224 - 各</span>加入籃球框</p>
<p><span><span style="background-color: #ccffcc;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/biAW9vQ4FBE" width="560"></iframe></span></span></p>
<p><span><span style="background-color: #ccffcc;"><img alt="" height="413" src="/images/螢幕擷取畫面 2025-06-19 113902.png" width="734"/></span></span></p>
<p><span>6/19補上supervisor robot feedball按R產生球F可擊出狀態</span></p>
<p><span>心得:這堂課做到後面覺得越來越難很難跟上其他人的速度，從一開始的四連桿我就覺得很難做了56遍還是動不起來好在後面HW23Exam23都滿順利的，但我還是有把HW123Exam123和final都做出來，雖然final沒做到完整，只能讓它移動，所以我還是要繼續修改盡量讓它完整，當老師問我在這堂課學到甚麼我實在答不出來，我在這堂課雖然都只學到皮毛，但之後我會在忙著跟上進度時先搞清楚自己在做甚麼。</span></p>
<h2><span>程式</span></h2>
<p>fourbar_controller</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard  # 匯入 Webots 控制所需的 Robot 和 Keyboard 類別

# 常數設定
TIME_STEP = 32  # 控制循環的時間間隔（毫秒）
MAX_VELOCITY = 10.0  # 車輪最大速度
ANGLE_STEP = 40 * 3.14159 / 180  # 將 40 度轉換為弧度（機構用角度）
POSITION_M = ANGLE_STEP          # 機構移動至 +40 度的位置
POSITION_K = 0.0                 # 機構移動至 0 度的位置

# 初始化機器人與鍵盤
robot = Robot()  # 創建 Robot 物件
timestep = int(robot.getBasicTimeStep())  # 取得機器人基礎時間步長
keyboard = Keyboard()  # 創建鍵盤物件
keyboard.enable(timestep)  # 啟用鍵盤偵測，使用相同時間步長

# 嘗試取得馬達與感測器裝置
try:
    motor = robot.getDevice('motor1')  # 取得名為 motor1 的馬達裝置
    sensor = robot.getDevice('motor1_sensor')  # 取得與馬達對應的感測器
    sensor.enable(timestep)  # 啟用感測器以讀取資料
    mechanism_enabled = True  # 成功取得裝置，啟用機構控制
except Exception:
    mechanism_enabled = False  # 若出錯（裝置不存在），則停用機構功能

# 嘗試取得車輪裝置
try:
    wheels = [robot.getDevice(f"wheel{i+1}") for i in range(4)]  # 取得四個車輪裝置
    for wheel in wheels:
        wheel.setPosition(float('inf'))  # 設為無限位置，開啟速度控制模式
        wheel.setVelocity(0)  # 初始速度設為 0
    platform_enabled = True  # 若成功取得裝置，啟用平台控制
except Exception:
    platform_enabled = False  # 若取得失敗，停用平台功能

# 狀態機初始狀態：允許按 F 鍵動作
current_state = "allow_f"

# 記錄按鍵是否已被按下，用於去彈跳（避免重複觸發）
key_pressed = {
    'v': False,  # 記錄 V 鍵是否被按下
    'f': False   # 記錄 F 鍵是否被按下
}

# 主循環，重複執行直到模擬結束
while robot.step(timestep) != -1:
    key = keyboard.getKey()  # 讀取目前按下的鍵

    # 平台控制（移動用輪子）
    if platform_enabled:
        if key == Keyboard.UP:
            for wheel in wheels:
                wheel.setVelocity(MAX_VELOCITY)  # 所有輪子向前
        elif key == Keyboard.DOWN:
            for wheel in wheels:
                wheel.setVelocity(-MAX_VELOCITY)  # 所有輪子向後
        elif key == Keyboard.LEFT:
            # 左轉（左右輪反方向旋轉）
            wheels[0].setVelocity(MAX_VELOCITY)
            wheels[1].setVelocity(-MAX_VELOCITY)
            wheels[2].setVelocity(MAX_VELOCITY)
            wheels[3].setVelocity(-MAX_VELOCITY)
        elif key == Keyboard.RIGHT:
            # 右轉（左右輪反方向旋轉）
            wheels[0].setVelocity(-MAX_VELOCITY)
            wheels[1].setVelocity(MAX_VELOCITY)
            wheels[2].setVelocity(-MAX_VELOCITY)
            wheels[3].setVelocity(MAX_VELOCITY)
        elif key == ord('Q') or key == ord('q'):
            print("Exiting...")  # 按 Q 結束程式
            break
        else:
            for wheel in wheels:
                wheel.setVelocity(0)  # 沒有方向鍵按下時停止移動

    # 馬達控制（用 F / V 鍵操作）
    if mechanism_enabled:
        _current_motor_position = sensor.getValue()  # 讀取馬達目前位置（可用於除錯）

        # 按下 F 鍵時，若允許且尚未按住，讓馬達轉到 +40 度
        if key == ord('F') or key == ord('f'):
            if not key_pressed['f'] and current_state == "allow_f":
                motor.setPosition(POSITION_M)  # 馬達移動至 +40 度
                current_state = "allow_v"  # 下一次只能按 V
            key_pressed['f'] = True  # 標記 F 鍵已按
        else:
            key_pressed['f'] = False  # F 鍵已放開

        # 按下 V 鍵時，若允許且尚未按住，讓馬達轉回 0 度
        if key == ord('V') or key == ord('v'):
            if not key_pressed['v'] and current_state == "allow_v":
                motor.setPosition(POSITION_K)  # 馬達移動至 0 度
                current_state = "allow_f"  # 下一次只能按 F
            key_pressed['v'] = True  # 標記 V 鍵已按
        else:
            key_pressed['v'] = False  # V 鍵已放開</pre>
<p>feed_ball<span style="background-color: #ffff00;"><br/><br/></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Supervisor, Keyboard  # 匯入 Webots 的 Supervisor 和鍵盤控制模組
import time                                   # 匯入時間模組，用於記錄與計時
import random                                 # 匯入隨機模組，用於顏色和命名
import numpy as np                            # 匯入 NumPy，用來處理向量運算
import re                                     # 匯入正規表達式模組，用來比對 DEF 名稱

# ----------------- 參數區 -----------------
HOOP_CENTER = [0.622, -0.103, 0.742838]       # 籃框中心座標
BALL_DEF_PATTERN = re.compile(r"Sphere_\d+")  # 比對球的 DEF 名稱用的正則表達式

supervisor = Supervisor()                     # 建立 Webots 的 Supervisor 實例
timestep = int(supervisor.getBasicTimeStep()) # 取得模擬時間步長
keyboard = Keyboard()                         # 建立鍵盤控制實例
keyboard.enable(timestep)                     # 啟用鍵盤，並設定更新頻率為 timestep

# 球與軌跡點設定
sphere_radius = 0.1
TRAJECTORY_POINT_RADIUS = 0.03                # 軌跡球的半徑
TRAJECTORY_POINT_STEP = 0.12                  # 軌跡點之間的最小距離
TRAJECTORY_MAX_POINTS = 5                     # 最多顯示5個軌跡點

# 狀態變數初始化
waiting_ball_def = None                       # 等待發射的球的 DEF 名稱
waiting_ball_info = None                      # 等待發射球的資訊（位置與顏色）
last_key_time = 0                             # 上一次按鍵時間（防止重複觸發）
debounce_time = 0.5                           # 按鍵去彈時間（秒）
default_feed_pos = (-0.35, 0.0, 0.9)           # 新球產生時的相對位置
PRINT_INTERVAL = 0.2                          # 球座標輸出間隔

current_tracked_def = None                    # 目前追蹤的球 DEF 名稱
last_print_time = time.time()                 # 上次輸出時間

trajectory_points = []                        # 保存目前的軌跡點 [(位置, def名稱)] 最多5個

# ----------------- 函式定義 -----------------

# 將軸角轉換為旋轉矩陣（用於從 local 座標轉為 world 座標）
def axis_angle_to_rotation_matrix(axis, angle):
    x, y, z = axis
    c = np.cos(angle)
    s = np.sin(angle)
    C = 1 - c
    return np.array([
        [x*x*C + c,   x*y*C - z*s, x*z*C + y*s],
        [y*x*C + z*s, y*y*C + c,   y*z*C - x*s],
        [z*x*C - y*s, z*y*C + x*s, z*z*C + c]
    ])

# 產生獨一無二的球名稱（根據時間戳與亂數）
def generate_valid_def_name(base_name="Sphere"):
    timestamp = int(supervisor.getTime() * 1000)
    return f"{base_name}_{timestamp}_{random.randint(0, 10000)}"

# 產生隨機 RGB 顏色
def generate_random_color():
    return random.random(), random.random(), random.random()

# 將 youbot 上的 local 座標轉成 world 座標
def youbot_local_to_world(local_pos):
    youbot_node = supervisor.getFromDef('youbot')
    if youbot_node is None:
        raise RuntimeError("找不到 DEF 為 youbot 的 Robot 物件")
    youbot_translation = np.array(youbot_node.getField('translation').getSFVec3f())
    youbot_rotation = youbot_node.getField('rotation').getSFRotation()
    youbot_axis = youbot_rotation[:3]
    youbot_angle = youbot_rotation[3]
    youbot_rot_mat = axis_angle_to_rotation_matrix(youbot_axis, youbot_angle)
    rotated = youbot_rot_mat @ np.array(local_pos)
    world_pos = youbot_translation + rotated
    return tuple(world_pos)

# 建立靜止球（不含物理）
def create_static_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)

# 建立動態球（可以被物理模擬推動）
def create_dynamic_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
      physics Physics {{
        mass 0.01
        density -1
      }}
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)

# 建立軌跡小球作為可視化記號（Transform + Shape，無物理）
def create_trajectory_point(pos):
    def_name = generate_valid_def_name("TrajectoryPt")
    sphere_string = f"""
    DEF {def_name} Transform {{
      translation {pos[0]} {pos[1]} {pos[2]}
      children [
        Shape {{
          geometry Sphere {{
            radius {TRAJECTORY_POINT_RADIUS}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor 1 0.7 0
              transparency 0.3
            }}
          }}
        }}
      ]
    }}
    """
    root = supervisor.getRoot()
    children_field = root.getField("children")
    children_field.importMFNodeFromString(-1, sphere_string)
    return def_name

# 刪除目前所有軌跡點
def delete_trajectory_points():
    global trajectory_points
    for _, def_name in trajectory_points:
        node = supervisor.getFromDef(def_name)
        if node:
            node.remove()
    trajectory_points.clear()

# 建立一顆靜止球（並儲存它的資訊）
def create_static_sphere(supervisor, x, y, z):
    global waiting_ball_def, waiting_ball_info
    def_name = generate_valid_def_name()
    waiting_ball_def = def_name
    r, g, b = generate_random_color()
    world_pos = youbot_local_to_world((x, y, z))
    waiting_ball_info = (world_pos, r, g, b)
    create_static_ball(def_name, world_pos, r, g, b)

# 將靜止球移除並改為物理球
def activate_dynamic_ball():
    global waiting_ball_def, waiting_ball_info
    if waiting_ball_def is None or waiting_ball_info is None:
        return
    ball_node = supervisor.getFromDef(waiting_ball_def)
    if ball_node is not None:
        ball_node.remove()
        supervisor.step(int(supervisor.getBasicTimeStep()))
    world_pos, r, g, b = waiting_ball_info
    create_dynamic_ball(waiting_ball_def, world_pos, r, g, b)
    waiting_ball_def = None
    waiting_ball_info = None

# 判斷球是否落地（以 z 軸高度為依據）
def is_ball_landed(pos, threshold_z=0.13):
    return pos[2] &lt; threshold_z

# ----------------- 主迴圈 -----------------

print("按 R 產生一顆靜止球，按 F 讓球變 dynamic 可擊出（最多只有5個軌跡點跟著球跑，球落地後軌跡自動消失）")

while supervisor.step(timestep) != -1:
    key = keyboard.getKey()
    current_time = time.time()

    # 按 R 鍵產生一顆靜止球
    if key == ord('R') and (current_time - last_key_time &gt;= debounce_time):
        if waiting_ball_def is None:
            create_static_sphere(supervisor, *default_feed_pos)
            current_tracked_def = waiting_ball_def
            delete_trajectory_points()
        else:
            print("還有一顆球等待擊出，請先擊出再產生新球。")
        last_key_time = current_time

    # 按 F 鍵讓球變成可被物理推動（Dynamic）
    if key == ord('F') and (current_time - last_key_time &gt;= debounce_time):
        activate_dynamic_ball()
        last_key_time = current_time

    # 若目前有追蹤的球，就更新軌跡顯示與落地檢查
    if current_tracked_def is not None:
        ball_node = supervisor.getFromDef(current_tracked_def)
        if ball_node is not None:
            pos = ball_node.getPosition()
            if current_time - last_print_time &gt;= PRINT_INTERVAL:
                # print(f"球 {current_tracked_def} 絕對座標: [{pos[0]:.4f}, {pos[1]:.4f}, {pos[2]:.4f}]")
                last_print_time = current_time

            # 若與上一個軌跡點距離足夠遠，新增新的軌跡點
            if (not trajectory_points) or np.linalg.norm(np.array(pos) - np.array(trajectory_points[-1][0])) &gt; TRAJECTORY_POINT_STEP:
                def_name = create_trajectory_point(pos)
                trajectory_points.append((pos, def_name))
                if len(trajectory_points) &gt; TRAJECTORY_MAX_POINTS:
                    _, old_def = trajectory_points.pop(0)
                    node = supervisor.getFromDef(old_def)
                    if node:
                        node.remove()

            # 若球落地，刪除軌跡
            if is_ball_landed(pos):
                delete_trajectory_points()
        else:
            delete_trajectory_points()
            current_tracked_def = None</pre>
<p><span style="background-color: #ffff00;"></span>stand_controller</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from controller import Robot, Keyboard  # 匯入 Webots 提供的 Robot 與 Keyboard 類別

# 常數定義
WHEEL_RADIUS = 0.1  # 輪子的半徑（單位：公尺），此處為 10 公分
L = 0.471  # 機器人長度的一半（用於動力學計算）
W = 0.376  # 機器人寬度的一半
MAX_VELOCITY = 10.0  # 輪子的最大速度（單位：rad/s）

# 初始化機器人實體
robot = Robot()

# 取得模擬的時間步長（time step）
timestep = int(robot.getBasicTimeStep())

# 取得發射器裝置，用於傳送分數（與其他模組或裝置通訊）
emitter = robot.getDevice("score_emitter")

score_to_send = 2  # 每次感測成功後加分數，這裡設為 2 分，可自行調整

# 初始化距離感測器（距離球進入感測區的偵測裝置）
sensor = robot.getDevice('sensor')  # 取得感測器裝置
sensor.enable(timestep)  # 啟用感測器並設定刷新速率

score = 0  # 初始分數
last_score_time = 0  # 上一次得分的時間
cooldown = 1.0  # 冷卻時間（秒），防止重複計分

# 初始化鍵盤控制器
keyboard = Keyboard()
keyboard.enable(timestep)  # 啟用鍵盤偵測並設定刷新速率

# 取得四個馬達裝置（四輪全驅）
wheel5 = robot.getDevice("wheel5")  # 前右輪
wheel6 = robot.getDevice("wheel6")  # 前左輪
wheel7 = robot.getDevice("wheel7")  # 後右輪
wheel8 = robot.getDevice("wheel8")  # 後左輪

# 設定輪子為速度控制模式（inf 表示不限制旋轉角度）
for wheel in [wheel5, wheel6, wheel7, wheel8]:
    wheel.setPosition(float('inf'))  # 設定為速度控制（非位置控制）
    wheel.setVelocity(0)  # 初始速度為 0（靜止）

# 定義控制四個輪子速度的函式
def set_wheel_velocity(v1, v2, v3, v4):
    """設定每個輪子的速度"""
    wheel5.setVelocity(v1)
    wheel6.setVelocity(v2)
    wheel7.setVelocity(v3)
    wheel8.setVelocity(v4)

# 將感測器AD值對應到距離的查表函式（線性插值）
lookup_table = [
    (1000, 0.00),
    (620, 0.12),
    (372, 0.13),
    (248, 0.14),
    (186, 0.15),
    (0, 0.18)
]

# 根據感測器的AD值推算實際距離（單位：公尺）
def ad_to_distance(ad_value):
    # AD 值遞減時表示距離遞增（感測器邏輯）
    for i in range(len(lookup_table)-1):
        a0, d0 = lookup_table[i]
        a1, d1 = lookup_table[i+1]
        if a1 &lt;= ad_value &lt;= a0:
            # 線性插值公式：在 a0 和 a1 之間計算距離值
            return d0 + (d1 - d0) * (ad_value - a0) / (a1 - a0)
    # 若超出表格範圍則回傳邊界值
    if ad_value &gt; lookup_table[0][0]:
        return lookup_table[0][1]
    return lookup_table[-1][1]

# 主迴圈開始，負責持續讀取感測器與鍵盤輸入
print("Use 'W', 'S', 'A', 'D' keys to control the robot.")
print("W: Move forward, S: Move backward, A: Turn left, D: Turn right.")
print("Press 'Q' to quit.")

while robot.step(timestep) != -1:  # 每次時間步進（直到模擬結束）

    key = keyboard.getKey()  # 讀取目前按下的鍵

    # 讀取距離感測器數值
    sensor_value = sensor.getValue()
    distance = ad_to_distance(sensor_value)  # 轉換成距離（公尺）

    current_time = robot.getTime()  # 取得當前模擬時間

    # 如果按下 F 鍵，印出目前距離（除錯用）
    if key == ord('F') or key == ord('f'):
        print(distance)

    # 如果按下 V 鍵，也印出距離（除錯用）
    if key == ord('V') or key == ord('v'):
        print(distance)

    # 若感測距離小於 0.11 公尺，且超過冷卻時間，則加分
    if distance &lt; 0.11 and (current_time - last_score_time) &gt; cooldown:
        score += 2
        print("得分")  # 顯示得分訊息
        print(distance)  # 顯示當前距離
        emitter.send(str(score_to_send).encode('utf-8'))  # 傳送分數給外部（如顯示器）

        last_score_time = current_time  # 更新上次得分時間

    # 根據按鍵控制輪子移動方向
    if key == ord('S') or key == ord('w'):
        # 前進
        velocity = MAX_VELOCITY
        set_wheel_velocity(velocity, velocity, velocity, velocity)
    elif key == ord('W') or key == ord('s'):
        # 後退
        velocity = -MAX_VELOCITY
        set_wheel_velocity(velocity, velocity, velocity, velocity)
    elif key == ord('D') or key == ord('d'):
        # 右轉：左輪前進，右輪後退
        velocity = MAX_VELOCITY
        set_wheel_velocity(-velocity, velocity, -velocity, velocity)
    elif key == ord('A') or key == ord('a'):
        # 左轉：左輪後退，右輪前進
        velocity = MAX_VELOCITY
        set_wheel_velocity(velocity, -velocity, velocity, -velocity)
    elif key == ord('Q') or key == ord('q'):
        # 離開程式
        print("Exiting...")
        break
    else:
        # 沒有按鍵時停止移動
        set_wheel_velocity(0, 0, 0, 0)
</pre>
<p></p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>